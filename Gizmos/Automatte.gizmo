#! C:/Program Files/Nuke10.5v8/nuke-10.5.8.dll -nx
version 10.5 v8
Gizmo {
 inputs 0
 onCreate "nuke.thisNode()\['installAutoRun'].execute()"
 addUserKnob {20 timo l timo.ink}
 addUserKnob {26 info l Usage T "applyMatte(metadataNode, cryptomatteNode, cryptomatteChannel, filter=\[])\n\nmetadataNode : Read Node containing cryptomatte metadata\ncryptomatteNode : Cryptomatte node used to create the matte\ncryptomatteChannel : Cryptomatte channel used to create the matte, check in metadata to get correct channel name\nfilter : What to look for in cryptomatte metadata, this function is using regular expression\n\nex: applyMatte(nuke.toNode('UT'), nuke.toNode('Char_Matte'), 'CR.CryptoAsset', filter=\['C_.+:All', 'P_.+:All'])"}
 addUserKnob {26 div l "" +STARTLINE}
 addUserKnob {22 autoMatteFunction l INVISIBLE +INVISIBLE T "import cryptomatte_utilities \nimport re\n\ndef getCryptoData(n):\n    m = n.metadata()\n    cryptoData = \{\}\n    for k in m.keys():\n        if 'cryptomatte' in k and 'name' in k:\n            address =  k.split('/')\[2]\n            cryptoData\[m\[k]]= \{\n                'address' : address,\n                'objects' : eval(m\['exr/cryptomatte/%s/manifest' %address])\n            \}\n    return cryptoData\n\ndef applyMatte(metadataNode, cryptomatteNode, cryptomatteChannel, filter=\[]):\n    cryptoData = getCryptoData(metadataNode)\n    matte = \[]\n    for o in cryptoData\[cryptomatteChannel]\['objects'].keys():\n        for f in filter:\n            if f:\n                match = re.findall(f, o)\n                if match:\n                    matte.append(o)\n\n    cryptomatteNode\['cryptoLayerChoice'].setValue(cryptomatteChannel.replace('.', '_'))\n    cryptomatteNode\['matteList'].setValue(', '.join(matte))\n    cryptomatte_utilities.update_cryptomatte_gizmo(cryptomatteNode, force=True)\n\n    print 'Matte applied'" +STARTLINE}
 addUserKnob {22 installAutoRun l Install T "n = nuke.thisNode()\n\n# init function\nn\['autoMatteFunction'].execute()\n\ndef getBaseCmd():\n    return '''\n\nk = nuke.thisKnob()\nif k.name() == 'reload':\n    print 'Reloaded'\n\n''' \n\nif n\['autoInstall'].value():\n    collect = \[int(k\[4:]) for k in n.knobs() if k.startswith(\"atm_\")]\n    automattes = \{\}\n    for i in collect:\n        if n\['atr_%02d' %i].value():\n            target = n\['mdn_%02d' %i].evaluate()\n            cryptoNode = n\['crn_%02d' %i].evaluate()\n            cryptoChannel = n\['crc_%02d' %i].evaluate()\n            filter = \[s.lstrip().rstrip() for s in n\['flt_%02d' %i].evaluate().split(',')]\n            automattes\[target] = automattes.get(target, \[]) + \[(cryptoNode, cryptoChannel, filter)]\n\n    for target in automattes:\n        cmd = getBaseCmd()\n        for c in automattes\[target]:\n            cmd += '    nuke.executeInMainThreadWithResult( applyMatte, args=(nuke.toNode(\"%s\"), nuke.toNode(\"%s\"), \"%s\", %s) )\\n' %(target, c\[0], c\[1], str(c\[2]))\n        \n        nuke.toNode(target)\['knobChanged'].setValue(cmd)\n        print 'Installed on %s!' %target" +STARTLINE}
 addUserKnob {6 autoInstall l "Install on Create" -STARTLINE}
 autoInstall true
 addUserKnob {22 add l "Add Automatte" T "node = nuke.thisNode()\nlastgroup = \[k for k in node.knobs() if k.startswith(\"atm_\")]\nlastgroup.sort(reverse=True)\ncount = int(lastgroup \[0]\[4:])+1 if lastgroup else 1\n\nstart = nuke.Tab_Knob(\"atm_%02d\" %count, \"Automatte %02d\"  %count, 1)\natr = nuke.Boolean_Knob(\"atr_%02d\" %count, \"Auto run Automatte  %02d\"  %count)\natr.setValue(True)\nmdn = nuke.EvalString_Knob(\"mdn_%02d\" %count, \"Metadata Node %02d\"  %count)\ncrn = nuke.EvalString_Knob(\"crn_%02d\" %count, \"Cryptomatte Node %02d\"  %count)\ncrc = nuke.EvalString_Knob(\"crc_%02d\" %count, \"Cryptomatte Channel %02d\"  %count)\nflt = nuke.EvalString_Knob(\"flt_%02d\" %count, \"Filter %02d\"  %count)\nrun = nuke.PyScript_Knob(\"run_%02d\" %count, \"Run Automatte  %02d\"  %count)\nrun.setCommand(\"\"\"\nn = nuke.thisNode()\n\nsource = n\['\{mdn\}'].evaluate()\ntarget = n\['\{crn\}'].evaluate()\nchannel = n\['\{crc\}'].evaluate()\nfilter = \[s.lstrip().rstrip() for s in n\['\{flt\}'].evaluate().split(',')]\n\n\napplyMatte(nuke.toNode(source), nuke.toNode(target), channel, filter)\n\"\"\".format(mdn=mdn.name(), crn=crn.name(), crc=crc.name(), flt=flt.name()))\n\nend = nuke.Tab_Knob(\"atm_%02d\" %count, \"\", -1)\nfor k in \[start, atr, mdn,crn,crc,flt,run, end]:\n    node.addKnob(k)\n    k.setFlag(nuke.STARTLINE)\n" +STARTLINE}
 addUserKnob {26 div2 l "" +STARTLINE}
}
end_group
